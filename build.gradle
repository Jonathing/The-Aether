plugins {
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'io.github.0ffz.github-packages' version '1.+'
    id 'com.matthewprenger.cursegradle' version '1.4.+'
    id 'com.modrinth.minotaur' version '2.+'
    id 'me.jonathing.gradleworks' version '6.0.0-beta.7'
}

version = "${gradleworks.minecraft().version}-${project.mod_version}-forge"
group = 'com.gildedgames.aether' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 8 to end users, so your mod should target Java 8.

minecraft {
    // handles forge, mappings, and access transformer
    gradleworks.handleMinecraft()

    runs {
        client {
            workingDirectory project.file('run')

            //Only uncomment this if you actually need the debug logging! If you enable this the log will be full of incredibly useless information spam
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            //property 'forge.logging.console.level', 'debug'

            mods {
                "${project.mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            //property 'forge.logging.console.level', 'debug'

            mods {
                "${project.mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            //property 'forge.logging.console.level', 'debug'

            args '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing', file('src/generated/resources/')

            environment 'target', 'fmluserdevdata'

            mods {
                "${project.mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    gradleworks.handleDependencies()

    // special cases that gradleworks can't handle (like local libraries) down here
//    compileOnly fileTree(dir: 'libs', include: '*.jar')
}

repositories {
    gradleworks.handleRepositories()

    // special cases that gradleworks can't handle (like github packages) down here
//    maven githubPackage.invoke("Gilded-Games/Nitrogen")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_name,
                "Specification-Vendor"    : "Gilded Games",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.mod_name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Gilded Games",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

artifacts {
    archives sourcesJar
}

tasks.jarJar.configure {
    archiveClassifier = ""
}

tasks.named(sourceSets.main.compileJavaTaskName) {
    outputs.file("${it.temporaryDir}/${it.name}-refmap.json").withPropertyName("mixin refmap")
}

compileJava {
    options.incremental = false
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId project.archivesBaseName
            artifact jar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/Gilded-Games/The-Aether"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

curseforge {
    project {
        apiKey = System.getenv("CURSEFORGE_TOKEN")
        id = project.curseforge_id
        releaseType = project.version_type
        changelog = file("$rootDir/docs/CHANGELOG.md")
        changelogType = "markdown"
        addGameVersion(gradleworks.minecraft().version)
        mainArtifact(tasks.jar) {
            displayName = "${project.mod_name} - Forge - ${version}"
            relations {
                embeddedLibrary "curios"
                optionalDependency "starlight-forge"
            }
        }
    }
    options {
        debug = true
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = project.modrinth_id
    versionNumber = project.jar.archiveVersion
    versionType = project.version_type
    versionName = "${project.mod_name} - Forge - ${project.jar.archiveVersion}"
    changelog = new File("$rootDir/docs/CHANGELOG.md").text
    uploadFile = tasks.jar
    gameVersions = [gradleworks.minecraft().version]
    loaders = ["forge"]
    dependencies {
        embedded.version "curios", gradleworks.getDependencyVersion('curios-forge')
        optional.project "starlight-forge"
    }
    debugMode = true
}

mixin {
    config "${project.mod_id}.mixins.json"
    add sourceSets.main, "${project.mod_id}.refmap.json"
}

build {
    dependsOn 'jarJar'
}
